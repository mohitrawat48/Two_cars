/*********************************

Based off ball.sv from lab 8
Player1 controls red car
**********************************/

module  red_car ( input  logic   	   Clk,                // 100 MHz clock
													Reset,              // Active-high reset signal
													frame_clk,          // The clock indicating a new frame (~60Hz)
						input  logic  [9:0]  DrawX, DrawY,       // Current pixel coordinates to be drawn on the monitor
						output logic  			is_car,             // Whether current pixel (DrawX, DrawY) belongs to ball or background
						output logic  [9:0]  pixel_x_in_car, pixel_y_in_car, //relative to the car's top left pixel which is (0,0)
						input  logic  [7:0]  keycode,
						input  logic  [9:0]  step_size,
					);
	
	 parameter [9:0] redcar_X_default = 10'd211;  // Center position on the X axis
    parameter [9:0] redcar_Y_default = 10'd318;  // Center position on the Y axis
    parameter [9:0] redcar_X_Min = 10'd59;       // Leftmost point on the X axis
    parameter [9:0] redcar_X_Max = 10'd560;     // Rightmost point on the X axis
    parameter [9:0] redcar_Y_Min = 10'd0;       // Topmost point on the Y axis
    parameter [9:0] redcar_Y_Max = 10'd479;     // Bottommost point on the Y axis

	 parameter [9:0] redcar_size_X = 10'd74;        
	 parameter [9:0] redcar_size_Y = 10'd99; 
	 
	 parameter [7:0] key_w = 8'h1A;
	 parameter [7:0] key_s = 8'h16;
	 parameter [7:0] key_d = 8'h07;
	 parameter [7:0] key_a = 8'h04;
	    
    logic [9:0] redcar_X_Pos, redcar_Y_Pos;
    logic [9:0] redcar_X_Pos_in, redcar_Y_Pos_in;
    
    //////// Do not modify the always_ff blocks. ////////
    // Detect rising edge of frame_clk
    logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end
    // Update registers
    always_ff @ (posedge Clk)
    begin
        if (Reset)
        begin
            redcar_X_Pos <= redcar_X_deafult;
            redcar_Y_Pos <= redcar_Y_default;
        end
        else
        begin
            redcar_X_Pos <= redcar_X_Pos_in;
            redcar_Y_Pos <= redcar_Y_Pos_in;
        end
		  
		  
			pixel_x_in_car <= DrawX - redcar_X_Pos;
			pixel_y_in_car <= DrawY - redcar_Y_Pos;
		
    end
    //////// Do not modify the always_ff blocks. ////////
    
    // You need to modify always_comb block.
    always_comb
    begin
        // By default, keep motion and position unchanged
        redcar_X_Pos_in = redcar_X_Pos;
        redcar_Y_Pos_in = redcar_Y_Pos;
 
        // Update position and motion only at rising edge of frame clock
        if (frame_clk_rising_edge)
        begin
            
				if( redcar_X_Pos + redcar_size_x > redcar_X_Max ) 
						redcar_X_Pos_in = redcar_X_Max - redcar_size_X;
					
				if( redcar_X_Pos < redcar_X_Min ) 
						redcar_X_Pos_in = redcar_X_Min ;
				
				if( redcar_Y_Pos < redcar_Y_Min ) 
						redcar_Y_Pos_in = redcar_Y_Min ;
						
				if( redcar_Y_Pos + redcar_size_Y > redcar_Y_Max ) 
						redcar_Y_Pos_in = redcar_Y_Max + redcar_size_Y;				
				
				// TODO: Add other boundary detections and handle keypress here.
				
				
				if (keycode  == key_w && (! (redcar_Y_Pos < redcar_Y_Min) ) )
					redcar_Y_Pos_in = redcar_Y_Pos + step_size;				
				
				if (keycode  == key_s && ( !(redcar_Y_Pos + redcar_size_Y > redcar_Y_Max) ) )
					redcar_Y_Pos_in = redcar_Y_Pos - step_size;
					
				if (keycode  == key_d &&  !(redcar_X_Pos + redcar_size_x > redcar_X_Max) )
					redcar_X_Pos_in = redcar_X_Pos + step_size;
						
				if (keycode  == key_a && !(redcar_X_Pos < redcar_X_Min) )
					redcar_X_Pos_in = redcar_X_Pos - step_size;
					
        
        end
    end
    
	 logic temp1;
	 logic temp2;
	 
	 always_comb
	 begin
		
		
		temp1 = (DrawX >= redcar_X_Pos && DrawX <= redcar_X_Pos + redcar_size_X);
		temp2 = (DrawY >= redcar_Y_Pos && DrawY <= redcar_Y_Pos + redcar_size_Y);
	 if(  temp1 && temp2  )
			is_car = 1'b1;
		else
			is_car = 1'b0;
    end
	
	 
	 
endmodule
